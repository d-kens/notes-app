import { createSelector, createEntityAdapter } from "@reduxjs/toolkit";
import { apiSlice } from "../../app/api/apiSlice";

// Normalised data
const usersAdapter = createEntityAdapter({});

const initialState = usersAdapter.getInitialState();

export const usersApiSlice = apiSlice.injectEndpoints({
    endpoints: builder => ({
        getUsers: builder.query({
            query: () => '/users',
            validateStatus: (response, result) => {
                return response.status === 200 && !result.isError
            },
            keepUnusedDataFor: 60,
            transformResponse: responseData => {
                const loadedUsers = responseData.map(user => {
                    user.id = user._id
                    return user
                });
                // stored as normalized data with ids and entities
                return usersAdapter.setAll(initialState, loadedUsers)
            },
            providesTags: (result, error, arg) => {
                if(result?.ids) {
                    return [
                        { type: 'User', id: 'LIST' },
                        ...result.ids.map(id => ({ type: 'USer', id }))
                    ]
                } else return [{ type: 'User', id: 'LIST' }]
            }
        })
    })
})


export const { useGetUsersQuery } = usersApiSlice;

/** selectors */
// returns the result object of the getUsers endpoint
export const selectUsersResult = usersApiSlice.endpoints.getUsers.select();

// memoized selector - returns the normalized state object with ids and entities
const selectUsersData = createSelector(
    selectUsersResult,
    usersResult => usersResult.data
)


/*
    selectAllUsers, selectUserById, and selectUserIds 
     - are selectors that are generated by the getSelectors function of the usersAdapter. 
     - These selectors can be used to extract data from the normalized state object returned by selectUsersData 
     - and to perform operations such as filtering, sorting, and updating the users slice of state.
*/
export const {
    selectAll: selectAllUsers,
    selectById: selectUserById,
    selectIds: selectUserIds
} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)

